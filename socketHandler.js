const socketInstance = require('./utils/socketInstance');
const onlineUsers = require('./utils/onlineUsers');
const rankQueue = require('./utils/rankQueue');
const matches = require('./utils/matches');
const User = require('./models/user.model');

module.exports = (io) => {
    console.log("‚úÖ Socket.io server ready");
    socketInstance.set(io);

    io.on("connection", (socket) => {
        console.log(`‚úÖ New socket connected: ${socket.id}`);

        // Khi user online
        socket.on("user:online", async (userId) => {
            onlineUsers.set(userId, socket.id);
            console.log(`‚úÖ User ${userId} online at socket ${socket.id}`);

            try {
                await User.findByIdAndUpdate(userId, { onlineStatus: 'online' });
                socket.broadcast.emit("user:online", { userId });
            } catch (err) {
                console.error(`‚ùå Error updating user ${userId} to online:`, err);
            }
        });

        // B·∫Øt ƒë·∫ßu tr·∫≠n th∆∞·ªùng
        socket.on("match:start", ({ player1, player2 }) => {
            matches.setMatch(player1, player2);
            console.log(`üéÆ Match started between ${player1} and ${player2}`);
        });

        // Truy·ªÅn n∆∞·ªõc c·ªù
        socket.on("move:send", ({ fromUser, move }) => {
            const opponentId = matches.getOpponent(fromUser);
            const opponentSocket = onlineUsers.get(opponentId);

            if (opponentSocket) {
                io.to(opponentSocket).emit("move:receive", { move, fromUser });
                console.log(`‚û°Ô∏è ${fromUser} ƒëi: ${move} ‚Üí g·ª≠i t·ªõi ${opponentId}`);
            } else {
                console.warn(`‚ö†Ô∏è Opponent ${opponentId} kh√¥ng online`);
            }
        });

        // T√¨m tr·∫≠n rank
    // T√¨m tr·∫≠n rank
      socket.on("rank:find", async ({ userId, opponentId }) => {
  const user = await User.findById(userId);
  if (!user) return;

  const opponent = rankQueue.findMatch(user, opponentId); // ‚úÖ truy·ªÅn opponentId n·∫øu c√≥

  if (opponent) {
    rankQueue.remove(opponent._id);
    matches.setMatch(user._id.toString(), opponent._id.toString());

 

    const socket1 = onlineUsers.get(user._id.toString());
    const socket2 = onlineUsers.get(opponent._id.toString());

    if (socket1) io.to(socket1).emit("rank:matched", { opponent });
    if (socket2) io.to(socket2).emit("rank:matched", { opponent: user });

    console.log(`ü•ã Rank Match: ${user.username} vs ${opponent.username}`);
  } else {
    rankQueue.add(user);
    socket.emit("rank:waiting");
    console.log(`‚åõ ${user.username} ƒëang ch·ªù ƒë·ªëi th·ªß trong h√†ng ƒë·ª£i`);
  }
});


socket.on("custom:play", ({ fromUser, toUser }) => {
  const toSocket = onlineUsers.get(toUser);
  if (!toSocket) {
    console.log(`‚ö†Ô∏è User ${toUser} kh√¥ng online. Nh∆∞ng k·ªá, kh√¥ng b√°o l·ªói g√¨ c·∫£.`);
    return;
  }

  // ‚úÖ Emit th·∫≥ng cho ƒë·ªëi th·ªß, kh√¥ng g·ªçi l√† ‚Äúinvite‚Äù n·ªØa
  io.to(toSocket).emit("custom:play", { fromUser });

  console.log(`üéØ ${fromUser} b·∫Øt ƒë·∫ßu custom play v·ªõi ${toUser}`);
});


        // ‚ùå H·ªßy t√¨m tr·∫≠n rank
        socket.on("rank:cancel", async (userId) => {
            rankQueue.remove(userId);
            console.log(`üö´ User ${userId} h·ªßy t√¨m tr·∫≠n rank`);
            socket.emit("rank:cancelled");
        });


                // B·∫Øt ƒë·∫ßu tr·∫≠n th∆∞·ªùng v·ªõi 2 ID ƒë√£ bi·∫øt (gi·ªëng rank nh∆∞ng kh√¥ng gh√©p c·∫∑p)
socket.on("match:custom", async ({ player1, player2 }) => {
    // ‚úÖ Check n·∫øu ƒë√£ c√≥ tr·∫≠n gi·ªØa 2 ng∆∞·ªùi
    const existingOpponent1 = matches.getOpponent(player1);
    const existingOpponent2 = matches.getOpponent(player2);

    // N·∫øu ƒë√£ c√≥ tr·∫≠n th√¨ kh√¥ng t·∫°o n·ªØa
    if (existingOpponent1 === player2 && existingOpponent2 === player1) {
        console.log(`‚ö†Ô∏è Tr·∫≠n gi·ªØa ${player1} v√† ${player2} ƒë√£ t·ªìn t·∫°i. B·ªè qua.`);
        return;
    }

    // ‚ùó N·∫øu 1 trong 2 ƒë√£ trong tr·∫≠n kh√°c
    if (existingOpponent1 || existingOpponent2) {
        console.log(`‚ùå M·ªôt trong hai ng∆∞·ªùi ch∆°i ƒë√£ ƒëang trong tr·∫≠n kh√°c.`);
        return;
    }

    // ‚úÖ T·∫°o tr·∫≠n m·ªõi
    matches.setMatch(player1, player2);

  
    const socket1 = onlineUsers.get(player1);
    const socket2 = onlineUsers.get(player2);

    if (socket1) io.to(socket1).emit("match:started", { opponentId: player2 });
    if (socket2) io.to(socket2).emit("match:started", { opponentId: player1 });

    console.log(`üß© Tr·∫≠n th∆∞·ªùng b·∫Øt ƒë·∫ßu: ${player1} vs ${player2}`);
});


socket.on("challenge:refresh", async (userId) => {
  const io = socketInstance.get();
  if (!io) return;

  try {
    // T√¨m t·∫•t c·∫£ c√°c user li√™n quan, bao g·ªìm c·∫£ ch√≠nh b·∫£n th√¢n userId
    const users = await User.find({
      $or: [
        { _id: userId }, // üëà TH√äM: b·∫£n th√¢n ng∆∞·ªùi g·ª≠i
        { waitId: userId },
        { "challenges.challengerId": userId },
        { "challenges.receiverId": userId }
      ]
    }).select("_id");

    users.forEach((u) => {
      const targetSocket = onlineUsers.get(u._id.toString());
      if (targetSocket) {
        io.to(targetSocket).emit("challenge:refresh", { fromUser: userId });
        console.log(`üîÅ Emit challenge:refresh ‚Üí ${u._id.toString()}`);
      }
    });
  } catch (err) {
    console.error("‚ùå L·ªói khi emit challenge:refresh:", err);
  }
});

        // ‚ùå Tho√°t tr·∫≠n ƒë·∫•u ƒëang di·ªÖn ra
        socket.on("match:leave", async (userId) => {
            const opponentId = matches.getOpponent(userId);
            if (opponentId) {
                const opponentSocket = onlineUsers.get(opponentId);
                matches.removeMatch(userId);

                // C·∫≠p nh·∫≠t tr·∫°ng th√°i offline ho·∫∑c v·ªÅ 'online'
                await User.updateMany(
                    { _id: { $in: [userId, opponentId] } },
                    { onlineStatus: 'online' }
                );

                // G·ª≠i th√¥ng b√°o t·ªõi ƒë·ªëi th·ªß
                if (opponentSocket) {
                    io.to(opponentSocket).emit("match:left", { leaver: userId });
                }

                console.log(`üö™ User ${userId} ƒë√£ r·ªùi tr·∫≠n v·ªõi ${opponentId}`);
            }
        });

        // Ng·∫Øt k·∫øt n·ªëi
        socket.on("disconnect", async () => {
            const userId = onlineUsers.remove(socket.id);
            if (userId) {
                rankQueue.remove(userId);
                const opponentId = matches.getOpponent(userId);
                matches.removeMatch(userId);

                try {
                    await User.findByIdAndUpdate(userId, { onlineStatus: 'offline' });
                    socket.broadcast.emit("user:offline", { userId });
                    console.log(`‚ùå User ${userId} disconnected`);

                    if (opponentId) {
                        const opponentSocket = onlineUsers.get(opponentId);
                        if (opponentSocket) {
                            io.to(opponentSocket).emit("match:left", { leaver: userId });
                        }
                    }
                } catch (err) {
                    console.error(`‚ùå Error on disconnect:`, err);
                }
            }
        });
    });
};
