// controllers/user.controller.js
const User = require("../models/user.model");

// CRUD c∆° b·∫£n
exports.createUser = async (req, res) => {
    try {
        const user = new User(req.body);
        await user.save();
        res.status(201).json(user);
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
};

exports.getAllUsers = async (req, res) => {
    try {
        const users = await User.find().populate('matchHistory friends.friendId friends.messageId');
        res.json(users);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

exports.getUserById = async (req, res) => {
    try {
        const user = await User.findById(req.params.id)
            .populate({ path: 'matchHistory' })                              // ‚úÖ MatchHistory
            .populate({ path: 'friends.friendId', model: 'User' })           // ‚úÖ friends.friendId ‚Üí User
            .populate({ path: 'friends.messageId', model: 'ChatMessage' })   // ‚úÖ friends.messageId ‚Üí ChatMessage
            .populate({ path: 'challenges.challengerId', model: 'User' })    // ‚úÖ challenges.challengerId ‚Üí User
            .populate({ path: 'challenges.receiverId', model: 'User' });     // ‚úÖ challenges.receiverId ‚Üí User

        if (!user) return res.status(404).json({ error: "User not found" });
        res.json(user);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};



exports.updateUser = async (req, res) => {
    console.log(req)
    try {
        const user = await User.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!user) return res.status(404).json({ error: "User not found" });
        res.json(user);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

exports.deleteUser = async (req, res) => {
    try {
        const user = await User.findByIdAndDelete(req.params.id);
        if (!user) return res.status(404).json({ error: "User not found" });
        res.json({ message: "User deleted" });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

// Friend management
exports.addFriend = async (req, res) => {
    try {
        const { friendId } = req.body;
        const user = await User.findById(req.params.id);
        if (!user) return res.status(404).json({ error: "User not found" });

        user.friends.push({ friendId, status: 'request' });
        await user.save();
        res.json({ message: "Friend request sent" });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

exports.updateFriendStatus = async (req, res) => {
    try {
        const { friendId, status } = req.body;
        const user = await User.findById(req.params.id);
        if (!user) return res.status(404).json({ error: "User not found" });

        const friend = user.friends.find(f => f.friendId.toString() === friendId);
        if (!friend) return res.status(404).json({ error: "Friend not found" });

        friend.status = status;
        await user.save();
        res.json({ message: "Friend status updated" });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

// Challenge management
exports.sendChallenge = async (req, res) => {
    try {
        const { challengerId, receiverId } = req.body;
        const receiver = await User.findById(receiverId);
        if (!receiver) return res.status(404).json({ error: "Receiver not found" });

        receiver.challenges.push({ challengerId, receiverId, status: 'pending' });
        await receiver.save();
        res.json({ message: "Challenge sent" });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

exports.acceptChallenge = async (req, res) => {
    try {
        const { userId, challengeId } = req.params;
        const user = await User.findById(userId);
        if (!user) return res.status(404).json({ error: "User not found" });

        const challenge = user.challenges.id(challengeId);
        if (!challenge) return res.status(404).json({ error: "Challenge not found" });

        challenge.status = 'accepted';
        await user.save();
        res.json({ message: "Challenge accepted" });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

exports.declineChallenge = async (req, res) => {
    try {
        const { userId, challengeId } = req.params;
        const user = await User.findById(userId);
        if (!user) return res.status(404).json({ error: "User not found" });

        const challenge = user.challenges.id(challengeId);
        if (!challenge) return res.status(404).json({ error: "Challenge not found" });

        challenge.status = 'declined';
        await user.save();
        res.json({ message: "Challenge declined" });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

    exports.cancelChallenge = async (req, res) => {
    try {
        const { receiverId, challengeId } = req.params;
        const receiver = await User.findById(receiverId);
        if (!receiver) return res.status(404).json({ error: "Receiver not found" });

        const challenge = receiver.challenges.id(challengeId);
        if (!challenge) return res.status(404).json({ error: "Challenge not found" });

        challenge.status = 'cancelled';
        await receiver.save();
        res.json({ message: "Challenge cancelled" });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }

   
    
};


exports.login = async (req, res) => {
    try {
        const { username, password } = req.body;

        // ‚úÖ T√¨m user theo username ho·∫∑c email
        const user = await User.findOne({
            $or: [{ username }, { email: username }]
        });

        if (!user) return res.status(404).json({ error: "User not found" });

        // ‚úÖ So s√°nh password (v√¨ b·∫°n ch∆∞a d√πng bcrypt n√™n ch·ªâ so s√°nh th·∫≥ng)
        if (user.password !== password)
            return res.status(401).json({ error: "Invalid password" });

        res.json({ message: "Login successful", user });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};



exports.registerUser = async (req, res) => {
    try {
        console.log("üëâ [registerUser] req.body:", req.body);

        const { username, password, email, googleId, photo } = req.body;

        // ‚úÖ N·∫øu c√≥ googleId ‚Üí x·ª≠ l√Ω ƒëƒÉng k√Ω Googlec
        if (googleId) {
            console.log("üëâ [Google Login] googleId:", googleId);

            let user = await User.findOne({ googleId });
            if (user) {
                console.log("‚úÖ [Google Login] User ƒë√£ t·ªìn t·∫°i:", user);
                return res.json({ message: "Login by Google successful", user });
            }

            // N·∫øu ch∆∞a t·ªìn t·∫°i ‚Üí t·∫°o m·ªõi
            user = new User({
                username: username || `google_${Date.now()}`,
                googleId,
                email: email || "",
                password: "-1",  // kh√¥ng c·∫ßn password v·ªõi Google
                displayName: username,
                avatarUrl: photo || "",
            });

            console.log("üëâ [Google Login] T·∫°o user m·ªõi:", user);

            await user.save();
            console.log("‚úÖ [Google Login] User ƒë√£ l∆∞u th√†nh c√¥ng:", user);

            return res.json({ message: "Login by Google successful", user });
        }

        // ‚úÖ N·∫øu kh√¥ng c√≥ googleId ‚Üí x·ª≠ l√Ω ƒëƒÉng k√Ω th∆∞·ªùng
        console.log("üëâ [Normal Register] B·∫Øt ƒë·∫ßu ki·ªÉm tra username + email");

        // Ki·ªÉm tra tr√πng username
        const existingUsername = await User.findOne({ username });
        if (existingUsername) {
            console.log("‚ùå [Normal Register] Username ƒë√£ t·ªìn t·∫°i:", username);
            return res.status(400).json({ error: "Username already exists" });
        }

        // Ki·ªÉm tra tr√πng email (n·∫øu c√≥)
        if (email) {
            const existingEmail = await User.findOne({ email });
            if (existingEmail) {
                console.log("‚ùå [Normal Register] Email ƒë√£ t·ªìn t·∫°i:", email);
                return res.status(400).json({ error: "Email already exists" });
            }
        }

        // T·∫°o user m·ªõi
        const newUser = new User({
            username,
            password,
            email: email || "",
            displayName: username,
        });

        console.log("üëâ [Normal Register] T·∫°o user m·ªõi:", newUser);

        await newUser.save();
        console.log("‚úÖ [Normal Register] User ƒë√£ l∆∞u th√†nh c√¥ng:", newUser);

        res.json({ message: "Register successful", user: newUser });

    } catch (err) {
        console.error("‚ùå [registerUser] L·ªói h·ªá th·ªëng:", err);
        res.status(500).json({ error: err.message });
    }
};



const nodemailer = require("nodemailer");

// B·ªô nh·ªõ t·∫°m l∆∞u m√£ ƒë·ªïi m·∫≠t kh·∫©u
const changePasswordCodes = new Map();

// ‚úÖ C·∫•u h√¨nh g·ª≠i email (ƒë·∫∑t email v√† password th·∫≠t c·ªßa b·∫°n ·ªü ƒë√¢y)
const transporter = nodemailer.createTransport({
    service: "Gmail",
    auth: {
        user: "managingagents.se@gmail.com",
        pass: "gtwdyjnrsuimdojf",   // ‚ùó m·∫≠t kh·∫©u ·ª©ng d·ª•ng (app password)
    },
});

// ‚úÖ B∆∞·ªõc 1: G·ª≠i m√£ x√°c th·ª±c ƒë·ªïi m·∫≠t kh·∫©u
exports.requestChangePasswordCode = async (req, res) => {
    const { email } = req.body;
    console.log("üëâ [requestChangePasswordCode] Nh·∫≠n y√™u c·∫ßu g·ª≠i m√£ x√°c th·ª±c cho:", email);

    try {
        const user = await User.findOne({ email });
        if (!user) {
            console.log("‚ùå [requestChangePasswordCode] Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email:", email);
            return res.status(404).json({ error: "Email kh√¥ng t·ªìn t·∫°i" });
        }

        const code = Math.floor(100000 + Math.random() * 900000).toString();
        changePasswordCodes.set(email, { code, createdAt: Date.now() });

        console.log(`‚úÖ [requestChangePasswordCode] ƒê√£ t·∫°o m√£ x√°c th·ª±c: ${code} cho email: ${email}`);

        await transporter.sendMail({
            from: "managingagents.se@gmail.com",
            to: email,
            subject: "M√£ x√°c th·ª±c ƒë·ªïi m·∫≠t kh·∫©u",
            text: `M√£ x√°c th·ª±c ƒë·ªïi m·∫≠t kh·∫©u c·ªßa b·∫°n l√†: ${code}. M√£ c√≥ hi·ªáu l·ª±c trong 10 ph√∫t.`,
        });

        console.log(`‚úÖ [requestChangePasswordCode] ƒê√£ g·ª≠i email m√£ x√°c th·ª±c t·ªõi: ${email}`);
        res.status(200).json({ message: "ƒê√£ g·ª≠i m√£ x√°c th·ª±c t·ªõi email c·ªßa b·∫°n." });
    } catch (err) {
        console.error("‚ùå [requestChangePasswordCode] L·ªói h·ªá th·ªëng:", err);
        res.status(500).json({ error: "L·ªói khi g·ª≠i m√£ x√°c th·ª±c" });
    }
};

// ‚úÖ B∆∞·ªõc 2: X√°c nh·∫≠n ƒë·ªïi m·∫≠t kh·∫©u
exports.confirmChangePassword = async (req, res) => {
    const { email, code, newPassword } = req.body;
    console.log(`üëâ [confirmChangePassword] Y√™u c·∫ßu x√°c nh·∫≠n ƒë·ªïi m·∫≠t kh·∫©u cho email: ${email}, m√£ code: ${code}`);

    try {
        const stored = changePasswordCodes.get(email);

        if (!stored) {
            console.log("‚ùå [confirmChangePassword] Kh√¥ng t√¨m th·∫•y m√£ cho email:", email);
            return res.status(400).json({ error: "M√£ x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n." });
        }

        if (stored.code !== code) {
            console.log(`‚ùå [confirmChangePassword] M√£ kh√¥ng kh·ªõp. Nh·∫≠p: ${code}, th·ª±c t·∫ø: ${stored.code}`);
            return res.status(400).json({ error: "M√£ x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n." });
        }

        // Ki·ªÉm tra h·∫øt h·∫°n (10 ph√∫t)
        if (Date.now() - stored.createdAt > 10 * 60 * 1000) {
            console.log(`‚ùå [confirmChangePassword] M√£ ƒë√£ h·∫øt h·∫°n cho email: ${email}`);
            changePasswordCodes.delete(email);
            return res.status(400).json({ error: "M√£ x√°c th·ª±c ƒë√£ h·∫øt h·∫°n." });
        }

        const user = await User.findOne({ email });
        if (!user) {
            console.log(`‚ùå [confirmChangePassword] Kh√¥ng t√¨m th·∫•y user v·ªõi email: ${email}`);
            return res.status(404).json({ error: "Email kh√¥ng t·ªìn t·∫°i" });
        }

        console.log(`‚úÖ [confirmChangePassword] ƒê·ªïi m·∫≠t kh·∫©u cho user: ${user.username} (email: ${email})`);
        user.password = newPassword;
        await user.save();

        changePasswordCodes.delete(email);
        console.log(`‚úÖ [confirmChangePassword] ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng v√† ƒë√£ x√≥a m√£ t·∫°m cho email: ${email}`);

        res.status(200).json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng." });
    } catch (err) {
        console.error("‚ùå [confirmChangePassword] L·ªói h·ªá th·ªëng:", err);
        res.status(500).json({ error: "L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u" });
    }
};

