const express = require("express");
const router = express.Router();
const Post = require("../models/post.model");
const User = require("../models/user.model");
const auth = require("../utils/authMiddleware"); // middleware x√°c th·ª±c

// üìù T·∫°o b√†i ƒëƒÉng m·ªõi
router.post("/", auth, async (req, res) => {
  try {
    const { caption, imageUrl } = req.body;
    if (!imageUrl) return res.status(400).json({ message: "Thi·∫øu ·∫£nh" });

    const post = await Post.create({
      user: req.user.id,
      caption,
      imageUrl
    });

    res.status(201).json(post);
  } catch (err) {
    res.status(500).json({ message: "L·ªói t·∫°o b√†i vi·∫øt", error: err.message });
  }
});

// üìö L·∫•y t·∫•t c·∫£ b√†i ƒëƒÉng m·ªõi nh·∫•t
router.get("/", async (req, res) => {
  try {
    const posts = await Post.find()
      .populate("user", "username avatarUrl")
      .sort({ createdAt: -1 });

    res.json(posts);
  } catch (err) {
    res.status(500).json({ message: "L·ªói l·∫•y b√†i vi·∫øt", error: err.message });
  }
});

// üëç Like ho·∫∑c Unlike b√†i ƒëƒÉng
router.post("/:id/like", auth, async (req, res) => {
  try {
    const post = await Post.findById(req.params.id);
    if (!post) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt" });

    const index = post.likes.indexOf(req.user.id);
    if (index === -1) {
      post.likes.push(req.user.id);
    } else {
      post.likes.splice(index, 1); // unlike
    }

    await post.save();
    res.json({ message: "C·∫≠p nh·∫≠t l∆∞·ª£t th√≠ch th√†nh c√¥ng", likes: post.likes.length });
  } catch (err) {
    res.status(500).json({ message: "L·ªói like b√†i vi·∫øt", error: err.message });
  }
});

// üí¨ B√¨nh lu·∫≠n b√†i ƒëƒÉng
router.post("/:id/comment", auth, async (req, res) => {
  try {
    const { content } = req.body;
    if (!content) return res.status(400).json({ message: "Thi·∫øu n·ªôi dung b√¨nh lu·∫≠n" });

    const post = await Post.findById(req.params.id);
    if (!post) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt" });

    const comment = {
      user: req.user.id,
      content,
      createdAt: new Date()
    };

    post.comments.push(comment);
    await post.save();

    res.status(201).json({ message: "ƒê√£ b√¨nh lu·∫≠n", comment });
  } catch (err) {
    res.status(500).json({ message: "L·ªói b√¨nh lu·∫≠n", error: err.message });
  }
});

// üìú L·∫•y 1 b√†i vi·∫øt chi ti·∫øt (c√≥ comment, like)
router.get("/:id", async (req, res) => {
  try {
    const post = await Post.findById(req.params.id)
      .populate("user", "username avatarUrl")
      .populate("comments.user", "username avatarUrl");

    if (!post) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt" });

    res.json(post);
  } catch (err) {
    res.status(500).json({ message: "L·ªói l·∫•y b√†i vi·∫øt", error: err.message });
  }
});


// üîç L·∫•y t·∫•t c·∫£ b√†i vi·∫øt c·ªßa ch√≠nh user
router.get("/me", auth, async (req, res) => {
  try {
    const posts = await Post.find({ user: req.user.id })
      .populate("user", "username avatarUrl")
      .sort({ createdAt: -1 });

    res.json(posts);
  } catch (err) {
    res.status(500).json({ message: "L·ªói l·∫•y b√†i vi·∫øt c·ªßa b·∫°n", error: err.message });
  }
});

// üßë‚Äçü§ù‚Äçüßë L·∫•y t·∫•t c·∫£ b√†i vi·∫øt c·ªßa b·∫°n b√®
router.get("/friends", auth, async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    if (!user) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

    const friendIds = user.friends
      .filter(f => f.status === "friend")
      .map(f => f.friendId);

    const posts = await Post.find({ user: { $in: friendIds } })
      .populate("user", "username avatarUrl")
      .sort({ createdAt: -1 });

    res.json(posts);
  } catch (err) {
    res.status(500).json({ message: "L·ªói l·∫•y b√†i vi·∫øt b·∫°n b√®", error: err.message });
  }
});

// üåç L·∫•y t·∫•t c·∫£ b√†i vi·∫øt c·ªßa ng∆∞·ªùi l·∫° (th·∫ø gi·ªõi) - tr·ª´ b·∫£n th√¢n
router.get("/global", auth, async (req, res) => {
  try {
    const posts = await Post.find({ user: { $ne: req.user.id } })
      .populate("user", "username avatarUrl")
      .sort({ createdAt: -1 });

    res.json(posts);
  } catch (err) {
    res.status(500).json({ message: "L·ªói l·∫•y b√†i vi·∫øt th·∫ø gi·ªõi", error: err.message });
  }
});

module.exports = router;
